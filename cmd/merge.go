/*
Copyright 2022 The K2 Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package cmd

import (
	"fmt"

	"github.com/spf13/cobra"
	"k8s.io/apimachinery/pkg/util/rand"
	"k8s.io/client-go/tools/clientcmd"
	clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
)

// mergeCmd represents the merge command
var mergeCmd = &cobra.Command{
	Use:   "merge",
	Short: "merge multi kubeconfig files",
	Long: `Merge multi kubeconfig files. For example:
	k2 config merge --from configa,configb`,
	Run: func(cmd *cobra.Command, args []string) {
		mergeConfig(cmd, args)
	},
}

var mergeOptions = struct {
	from []string
	to   string
}{}

func init() {
	configCmd.AddCommand(mergeCmd)

	mergeCmd.Flags().StringSliceVarP(&mergeOptions.from, "from", "f", []string{}, "the path merge config from")
	mergeCmd.Flags().StringVarP(&mergeOptions.to, "to", "t", "", "the path merge config to")

	mergeCmd.MarkFlagRequired("from")
}

func mergeConfig(cmd *cobra.Command, args []string) {
	var mergedConfig *clientcmdapi.Config
	if len(mergeOptions.to) != 0 {
		mergedConfig, _ = clientcmd.LoadFromFile(mergeOptions.to)
	}

	if mergedConfig == nil || clientcmdapi.IsConfigEmpty(mergedConfig) {
		mergedConfig = clientcmdapi.NewConfig()
	}
	fmt.Println(mergeOptions.from)

	for _, file := range mergeOptions.from {
		fromConfig, _ := clientcmd.LoadFromFile(file)
		if fromConfig == nil || clientcmdapi.IsConfigEmpty(fromConfig) {
			continue
		}
		for contextName, context := range fromConfig.Contexts {
			newContextName := fmt.Sprintf("k2-context-%s-%s", contextName, rand.String(5))
			mergedConfig.Contexts[newContextName] = context

			for clusterName, cluster := range fromConfig.Clusters {
				if clusterName == context.Cluster {
					newClusterName := fmt.Sprintf("k2-cluster-%s-%s", clusterName, rand.String(5))
					mergedConfig.Clusters[newClusterName] = cluster
				}
			}

			for userName, user := range fromConfig.AuthInfos {
				if userName == context.AuthInfo {
					newUserName := fmt.Sprintf("k2-user-%s-%s", userName, rand.String(5))
					mergedConfig.AuthInfos[newUserName] = user
				}
			}
		}
	}

	if len(mergeOptions.to) != 0 {
		err := clientcmd.WriteToFile(*mergedConfig, mergeOptions.to)
		if err != nil {
			panic(err)
		}
	} else {
		cfgContent, err := clientcmd.Write(*mergedConfig)
		if err != nil {
			panic(err)
		}
		fmt.Printf("---\n# Generated by k2 from:\n# - files: %v\n", mergeOptions.from)
		fmt.Println(string(cfgContent))
	}
}
